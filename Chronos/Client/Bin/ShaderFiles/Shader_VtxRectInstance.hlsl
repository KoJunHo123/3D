#include "Shader_Engine_Defines.hlsli"

matrix			g_WorldMatrix, g_ViewMatrix, g_ProjMatrix;
texture2D		g_Texture;

float g_fRatio;

struct VS_IN
{
	/* InputSlot : 0 */
	float3 vPosition : POSITION;
	float2 vTexcoord : TEXCOORD0;		

	/* InputSlot : 1 */
	float4 vRight : TEXCOORD1;
	float4 vUp : TEXCOORD2;
	float4 vLook : TEXCOORD3;
	float4 vTranslation : TEXCOORD4;
	float2 vLifeTime : TEXCOORD5;
    float4 vColor : COLOR0;
};

struct VS_OUT
{
	/* SV_ : ShaderValue */
	/* 내가 해야할 연산은 모두 마쳐놓은 것이므로 이후 dx가 추가적으로 해야할 이릉ㄹ 해라. */
	float4 vPosition : SV_POSITION;
	float2 vTexcoord : TEXCOORD0;
	float2 vLifeTime : TEXCOORD1;
    float4 vColor : COLOR0;
};

/* 1. 정점의 변환과정을 수행한다. */
/* 2. 정점의 구성 정보를 변형한다. */
VS_OUT VS_MAIN(/*정점*/VS_IN In)
{
	VS_OUT		Out = (VS_OUT)0;	

	/* 정점에 위치를 월드 뷰 투영변환한다.*/		
	/* 클라이언트에서 곱셈연산을 수행하는 TrnasformCoord함수와는 다르게 */
	/* mul함수의 경우에는 순수하게 행렬의 곱하기만 수행을 하고 w나누기연산자체는 수행하지 않는다. */
	matrix		TransformMatrix = float4x4(In.vRight, In.vUp, In.vLook, In.vTranslation);

	/* 로컬상태에서의 움직임 구현. */
	vector		vPosition = mul(float4(In.vPosition, 1.f), TransformMatrix);

	/* 월드에 특정 상태로 배치한다. */
	vPosition = mul(vPosition, g_WorldMatrix);

	vPosition = mul(vPosition, g_ViewMatrix);
	vPosition = mul(vPosition, g_ProjMatrix);

	Out.vPosition = vPosition;
	Out.vTexcoord = In.vTexcoord;
	Out.vLifeTime = In.vLifeTime;
    Out.vColor = In.vColor;
	
	return Out;
}

/* Triangle : 정점 세개가 다 vs_main을 통과할때까지 대기 */
/* 세개가 모두다 통과되면. 밑의 과정을 수행. */
/* 리턴된 정점의 w로 정점의 xyzw를 나눈다. 투영 */
/* 정점의 위치를 뷰포트로 변환다. (윈도우좌표로 변환한다)*/
/* 래스터라이즈 : 정점정보를 기반으로하여 픽셀이 만들어진다. */

struct PS_IN
{
	float4 vPosition : SV_POSITION;
	float2 vTexcoord : TEXCOORD0;	
	float2 vLifeTime : TEXCOORD1;
    float4 vColor : COLOR0;
};

struct PS_OUT
{
	vector vColor : SV_TARGET0;
};


/* 1. 픽셀의 최종적인 색상을 결정한다. */
PS_OUT PS_MAIN(PS_IN In)
{
	PS_OUT			Out = (PS_OUT)0;	
	
	Out.vColor = g_Texture.Sample(LinearSampler, In.vTexcoord);

	if (Out.vColor.a <= 0.3f)
		discard;

	// 검은색으로 시작.
	//Out.vColor.rgb = (float3)0.f;
	
    Out.vColor = In.vColor;
	//// 점점 빨게지게.
	//Out.vColor.r = In.vLifeTime.y / In.vLifeTime.x;
	Out.vColor.a = Out.vColor.a * (1.f - (In.vLifeTime.y / In.vLifeTime.x));
	
	if (In.vLifeTime.y >= In.vLifeTime.x)
		discard;

	return Out;
}

/* 1. 픽셀의 최종적인 색상을 결정한다. */
PS_OUT PS_SMOKE_MAIN(PS_IN In)
{
    PS_OUT Out = (PS_OUT) 0;
	
    Out.vColor = g_Texture.Sample(LinearSampler, In.vTexcoord);

    if (In.vColor.r >= In.vColor.g && In.vColor.r >= In.vColor.b)
    {
        Out.vColor.r *= 1.5f;
        Out.vColor.a = Out.vColor.r;
        Out.vColor.r = 1.f - Out.vColor.r;
        Out.vColor.gb = float2(Out.vColor.r, Out.vColor.r);
    }
    else if (In.vColor.g >= In.vColor.r && In.vColor.g >= In.vColor.b)
    {
        Out.vColor.g *= 1.5f;
        Out.vColor.a = Out.vColor.g;
        Out.vColor.g = 1.f - Out.vColor.g;
        Out.vColor.rb = float2(Out.vColor.g, Out.vColor.g);
    }
    else
    {
        Out.vColor.b *= 1.5f;
        Out.vColor.a = Out.vColor.b;
        Out.vColor.b = 1.f - Out.vColor.b;
        Out.vColor.rg = float2(Out.vColor.b, Out.vColor.b);
    }
	
	if(Out.vColor.a < g_fRatio)
        discard;
	
    return Out;
}

technique11	DefaultTechnique
{
	/* 빛연산 + 림라이트 + ssao + 노멀맵핑 + pbr*/
	pass UI
	{
		SetRasterizerState(RS_Default);
		SetDepthStencilState(DSS_Default, 0);
		SetBlendState(BS_AlphaBlend, vector(0.f, 0.f, 0.f, 0.f), 0xffffffff);

		VertexShader = compile vs_5_0 VS_MAIN();
        GeometryShader = NULL;
		PixelShader = compile ps_5_0 PS_MAIN();
	}

    pass SMOKE
    {
        SetRasterizerState(RS_Default);
        SetDepthStencilState(DSS_Default, 0);
        SetBlendState(BS_AlphaBlend, vector(0.f, 0.f, 0.f, 0.f), 0xffffffff);

        VertexShader = compile vs_5_0 VS_MAIN();
        GeometryShader = NULL;
        PixelShader = compile ps_5_0 PS_SMOKE_MAIN();
    }

	/* 디스토션 + 블렌딩 */
	//pass Effect
	//{
	//	VertexShader = compile vs_5_0 VS_MAIN_Special();
	//	PixelShader = compile ps_5_0 PS_MAIN_Special();
	//}
}